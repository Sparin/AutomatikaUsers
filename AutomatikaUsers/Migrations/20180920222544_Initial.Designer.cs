// <auto-generated />
using AutomatikaUsers.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AutomatikaUsers.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20180920222544_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AutomatikaUsers.Model.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Software");

                    b.HasData(
                        new { Id = 1, Name = "Microsoft Office 2017" },
                        new { Id = 2, Name = "Microsoft Visual Studio 2017" },
                        new { Id = 3, Name = "CCleaner" },
                        new { Id = 4, Name = "Discord" }
                    );
                });

            modelBuilder.Entity("AutomatikaUsers.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("IdentityName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.HasIndex("IdentityName")
                        .IsUnique()
                        .HasFilter("[IdentityName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, Email = "sparin285@gmail.com", FirstName = "Yuriy", IdentityName = "Sparin", LastName = "Medveditskov" },
                        new { Id = 2, IdentityName = "MockUser2" },
                        new { Id = 3, IdentityName = "MockUser3" }
                    );
                });

            modelBuilder.Entity("AutomatikaUsers.Model.UserSoftware", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("SoftwareId");

                    b.HasKey("UserId", "SoftwareId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("UserSoftware");

                    b.HasData(
                        new { UserId = 1, SoftwareId = 1 },
                        new { UserId = 1, SoftwareId = 2 },
                        new { UserId = 1, SoftwareId = 3 },
                        new { UserId = 1, SoftwareId = 4 },
                        new { UserId = 2, SoftwareId = 1 },
                        new { UserId = 2, SoftwareId = 2 },
                        new { UserId = 2, SoftwareId = 4 },
                        new { UserId = 3, SoftwareId = 3 }
                    );
                });

            modelBuilder.Entity("AutomatikaUsers.Model.UserSoftware", b =>
                {
                    b.HasOne("AutomatikaUsers.Model.Software", "Software")
                        .WithMany("Users")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutomatikaUsers.Model.User", "User")
                        .WithMany("InstalledSoftware")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
